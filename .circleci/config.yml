---
# ---------------------------------------------------------------------------------------------------------------------
# CircleCI Snippets
#
# Reusable snippets are defined below this section. These are yaml fragments that can injected into the standard
# CircleCI configuration, reducing the complexity of the entire block.
# ---------------------------------------------------------------------------------------------------------------------
deploy_docker_image: &deploy_docker_image
  image: 916869144969.dkr.ecr.us-east-1.amazonaws.com/customink/ktool:v13
  aws_auth:
    aws_access_key_id: ${PRODUCTION_AWS_ACCESS_KEY_ID}
    aws_secret_access_key: ${PRODUCTION_AWS_SECRET_ACCESS_KEY}

docker_image: &docker_image
  image:  916869144969.dkr.ecr.us-east-1.amazonaws.com/customink/python-ci:bionic 
  aws_auth:
    aws_access_key_id: ${PRODUCTION_AWS_ACCESS_KEY_ID}
    aws_secret_access_key: ${PRODUCTION_AWS_SECRET_ACCESS_KEY}

golang_docker_image: &golang_docker_image
  image: circleci/golang:1.15.8

# ---------------------------------------------------------------------------------------------------------------------
# CircleCI Commands Configuration
#
# Commands are re-usable steps that can be shared across jobs. For example the installation of gems using bundler or
# waiting on a database connection. By defining them inside the commands section, they can be invoked as any standard
# command on the system, but will already be preconfigured. This allows us to keep the jobs definition small and clean
# ---------------------------------------------------------------------------------------------------------------------
version: 2.1
orbs:
  prometheus: prometheus/prometheus@0.16.0
# ---------------------------------------------------------------------------------------------------------------------
# CircleCI Job Configuration
#
# This section defines all the available jobs that can be executed inside a Workflow.
# Think of a Job as a batch of tasks that need to be performed to setup the environment
# and perform a specific task such as running RSpec.
# ---------------------------------------------------------------------------------------------------------------------
jobs:
  ### Build and test the application
  build-and-test:
    working_directory: ~/project/generator
    docker:
      - <<: *golang_docker_image
      - <<: *docker_image
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}
      - run:
          name: Install Dependencies
          command: |
            sudo apt update -y && \
            sudo apt upgrade -y && \
            sudo apt install -y build-essential diffutils libsnmp-dev p7zip-full
      - save_cache:
          key: go-mod-v4-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
  docker-image:
    docker:
      - <<: *deploy_docker_image
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
            name: SNMP-Exporter Image
            command: |
              export AWS_ACCESS_KEY_ID=${PRODUCTION_AWS_ACCESS_KEY_ID}
              export AWS_SECRET_ACCESS_KEY=${PRODUCTION_AWS_SECRET_ACCESS_KEY}
              ktool build-image
# Invoke jobs via workflows
  deploy:
    parameters:
      env-name:
        type: string
      access-key:
        type: env_var_name
      secret-key:
        type: env_var_name
    docker:
      - <<: *deploy_docker_image
    steps:
      - checkout
      - run:
          name: Deploy to k8s cluster
          command: |
            export AWS_ACCESS_KEY_ID=${<< parameters.access-key >>}
            export AWS_SECRET_ACCESS_KEY=${<< parameters.secret-key >>}
            ktool deploy --stage << parameters.env-name >>
# -------------------------------------------------------------------------------------------------------------------- #
# CircleCI Workflow Execution Order                                                                                    #
#                                                                                                                      #
# Here we define the Workflow, the order of the various jobs and their dependencies.                                   #
# This allows us to decide whether to run certain tasks sequentially or run several of them in parallel.               #
# -------------------------------------------------------------------------------------------------------------------- #
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build-and-deploy:
    jobs:
      - build-and-test:
          context: customink
      - docker-image:
          context: customink
      - deploy:
          context: customink
          name: staging-deploy
          requires:
            - build-and-test
            - docker-image
          filters:
            branches:
              only:
                - master
                - sf/DCOPS-25205-snmp-scrap
          # Job parameters
          env-name: staging
          access-key: STAGING_AWS_ACCESS_KEY_ID
          secret-key: STAGING_AWS_SECRET_ACCESS_KEY
      - hold:
          type: approval
          requires:
            - staging-deploy
          filters:
            branches:
              only:
                - master
      - deploy:
          context: customink
          name: prod-deploy
          requires:
            - hold
          # Job parameters
          env-name: prod
          access-key: PRODUCTION_AWS_ACCESS_KEY_ID
          secret-key: PRODUCTION_AWS_SECRET_ACCESS_KEY
